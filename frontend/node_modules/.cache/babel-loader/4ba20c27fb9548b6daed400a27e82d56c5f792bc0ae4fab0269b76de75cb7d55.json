{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useUtils } from \"../useUtils.js\";\nimport { changeSectionValueFormat, cleanDigitSectionValue, doesSectionFormatHaveLeadingZeros, getDateSectionConfigFromFormatToken, getDaysInWeekStr, getLetterEditingOptions, applyLocalizedDigits, removeLocalizedDigits, isStringNumber } from \"./useField.utils.js\";\nconst isQueryResponseWithoutValue = response => response.saveQuery != null;\n\n/**\n * Update the active section value when the user pressed a key that is not a navigation key (arrow key for example).\n * This hook has two main editing behaviors\n *\n * 1. The numeric editing when the user presses a digit\n * 2. The letter editing when the user presses another key\n */\nexport const useFieldCharacterEditing = ({\n  stateResponse: {\n    // States and derived states\n    localizedDigits,\n    sectionsValueBoundaries,\n    state,\n    timezone,\n    // Methods to update the states\n    setCharacterQuery,\n    setTempAndroidValueStr,\n    updateSectionValue\n  }\n}) => {\n  const utils = useUtils();\n  const applyQuery = ({\n    keyPressed,\n    sectionIndex\n  }, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {\n    const cleanKeyPressed = keyPressed.toLowerCase();\n    const activeSection = state.sections[sectionIndex];\n\n    // The current query targets the section being editing\n    // We can try to concatenate the value\n    if (state.characterQuery != null && (!isValidQueryValue || isValidQueryValue(state.characterQuery.value)) && state.characterQuery.sectionIndex === sectionIndex) {\n      const concatenatedQueryValue = `${state.characterQuery.value}${cleanKeyPressed}`;\n      const queryResponse = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);\n      if (!isQueryResponseWithoutValue(queryResponse)) {\n        setCharacterQuery({\n          sectionIndex,\n          value: concatenatedQueryValue,\n          sectionType: activeSection.type\n        });\n        return queryResponse;\n      }\n    }\n    const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);\n    if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {\n      setCharacterQuery(null);\n      return null;\n    }\n    setCharacterQuery({\n      sectionIndex,\n      value: cleanKeyPressed,\n      sectionType: activeSection.type\n    });\n    if (isQueryResponseWithoutValue(queryResponse)) {\n      return null;\n    }\n    return queryResponse;\n  };\n  const applyLetterEditing = params => {\n    const findMatchingOptions = (format, options, queryValue) => {\n      const matchingValues = options.filter(option => option.toLowerCase().startsWith(queryValue));\n      if (matchingValues.length === 0) {\n        return {\n          saveQuery: false\n        };\n      }\n      return {\n        sectionValue: matchingValues[0],\n        shouldGoToNextSection: matchingValues.length === 1\n      };\n    };\n    const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {\n      const getOptions = format => getLetterEditingOptions(utils, timezone, activeSection.type, format);\n      if (activeSection.contentType === 'letter') {\n        return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);\n      }\n\n      // When editing a digit-format month / weekDay and the user presses a letter,\n      // We can support the letter editing by using the letter-format month / weekDay and re-formatting the result.\n      // We just have to make sure that the default month / weekDay format is a letter format,\n      if (fallbackFormat && formatFallbackValue != null && getDateSectionConfigFromFormatToken(utils, fallbackFormat).contentType === 'letter') {\n        const fallbackOptions = getOptions(fallbackFormat);\n        const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);\n        if (isQueryResponseWithoutValue(response)) {\n          return {\n            saveQuery: false\n          };\n        }\n        return _extends({}, response, {\n          sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      switch (activeSection.type) {\n        case 'month':\n          {\n            const formatFallbackValue = fallbackValue => changeSectionValueFormat(utils, fallbackValue, utils.formats.month, activeSection.format);\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.month, formatFallbackValue);\n          }\n        case 'weekDay':\n          {\n            const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.weekday, formatFallbackValue);\n          }\n        case 'meridiem':\n          {\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);\n          }\n        default:\n          {\n            return {\n              saveQuery: false\n            };\n          }\n      }\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery);\n  };\n  const applyNumericEditing = params => {\n    const getNewSectionValue = ({\n      queryValue,\n      skipIfBelowMinimum,\n      section\n    }) => {\n      const cleanQueryValue = removeLocalizedDigits(queryValue, localizedDigits);\n      const queryValueNumber = Number(cleanQueryValue);\n      const sectionBoundaries = sectionsValueBoundaries[section.type]({\n        currentDate: null,\n        format: section.format,\n        contentType: section.contentType\n      });\n      if (queryValueNumber > sectionBoundaries.maximum) {\n        return {\n          saveQuery: false\n        };\n      }\n\n      // If the user types `0` on a month section,\n      // It is below the minimum, but we want to store the `0` in the query,\n      // So that when he pressed `1`, it will store `01` and move to the next section.\n      if (skipIfBelowMinimum && queryValueNumber < sectionBoundaries.minimum) {\n        return {\n          saveQuery: true\n        };\n      }\n      const shouldGoToNextSection = queryValueNumber * 10 > sectionBoundaries.maximum || cleanQueryValue.length === sectionBoundaries.maximum.toString().length;\n      const newSectionValue = cleanDigitSectionValue(utils, queryValueNumber, sectionBoundaries, localizedDigits, section);\n      return {\n        sectionValue: newSectionValue,\n        shouldGoToNextSection\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      if (activeSection.contentType === 'digit' || activeSection.contentType === 'digit-with-letter') {\n        return getNewSectionValue({\n          queryValue,\n          skipIfBelowMinimum: false,\n          section: activeSection\n        });\n      }\n\n      // When editing a letter-format month and the user presses a digit,\n      // We can support the numeric editing by using the digit-format month and re-formatting the result.\n      if (activeSection.type === 'month') {\n        const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, 'digit', 'month', 'MM');\n        const response = getNewSectionValue({\n          queryValue,\n          skipIfBelowMinimum: true,\n          section: {\n            type: activeSection.type,\n            format: 'MM',\n            hasLeadingZerosInFormat,\n            hasLeadingZerosInInput: true,\n            contentType: 'digit',\n            maxLength: 2\n          }\n        });\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = changeSectionValueFormat(utils, response.sectionValue, 'MM', activeSection.format);\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n\n      // When editing a letter-format weekDay and the user presses a digit,\n      // We can support the numeric editing by returning the nth day in the week day array.\n      if (activeSection.type === 'weekDay') {\n        const response = getNewSectionValue({\n          queryValue,\n          skipIfBelowMinimum: true,\n          section: activeSection\n        });\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = getDaysInWeekStr(utils, activeSection.format)[Number(response.sectionValue) - 1];\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery, queryValue => isStringNumber(queryValue, localizedDigits));\n  };\n  return useEventCallback(params => {\n    const section = state.sections[params.sectionIndex];\n    const isNumericEditing = isStringNumber(params.keyPressed, localizedDigits);\n    const response = isNumericEditing ? applyNumericEditing(_extends({}, params, {\n      keyPressed: applyLocalizedDigits(params.keyPressed, localizedDigits)\n    })) : applyLetterEditing(params);\n    if (response == null) {\n      setTempAndroidValueStr(null);\n      return;\n    }\n    updateSectionValue({\n      section,\n      newSectionValue: response.sectionValue,\n      shouldGoToNextSection: response.shouldGoToNextSection\n    });\n  });\n};\n\n/**\n * The letter editing and the numeric editing each define a `CharacterEditingApplier`.\n * This function decides what the new section value should be and if the focus should switch to the next section.\n *\n * If it returns `null`, then the section value is not updated and the focus does not move.\n */\n\n/**\n * Function called by `applyQuery` which decides:\n * - what is the new section value ?\n * - should the query used to get this value be stored for the next key press ?\n *\n * If it returns `{ sectionValue: string; shouldGoToNextSection: boolean }`,\n * Then we store the query and update the section with the new value.\n *\n * If it returns `{ saveQuery: true` },\n * Then we store the query and don't update the section.\n *\n * If it returns `{ saveQuery: false },\n * Then we do nothing.\n */","map":{"version":3,"names":["_extends","useEventCallback","useUtils","changeSectionValueFormat","cleanDigitSectionValue","doesSectionFormatHaveLeadingZeros","getDateSectionConfigFromFormatToken","getDaysInWeekStr","getLetterEditingOptions","applyLocalizedDigits","removeLocalizedDigits","isStringNumber","isQueryResponseWithoutValue","response","saveQuery","useFieldCharacterEditing","stateResponse","localizedDigits","sectionsValueBoundaries","state","timezone","setCharacterQuery","setTempAndroidValueStr","updateSectionValue","utils","applyQuery","keyPressed","sectionIndex","getFirstSectionValueMatchingWithQuery","isValidQueryValue","cleanKeyPressed","toLowerCase","activeSection","sections","characterQuery","value","concatenatedQueryValue","queryResponse","sectionType","type","applyLetterEditing","params","findMatchingOptions","format","options","queryValue","matchingValues","filter","option","startsWith","length","sectionValue","shouldGoToNextSection","testQueryOnFormatAndFallbackFormat","fallbackFormat","formatFallbackValue","getOptions","contentType","fallbackOptions","fallbackValue","formats","month","indexOf","toString","weekday","applyNumericEditing","getNewSectionValue","skipIfBelowMinimum","section","cleanQueryValue","queryValueNumber","Number","sectionBoundaries","currentDate","maximum","minimum","newSectionValue","hasLeadingZerosInFormat","hasLeadingZerosInInput","maxLength","formattedValue","isNumericEditing"],"sources":["/Users/mac8/Desktop/vehicle-rental-form/frontend/node_modules/@mui/x-date-pickers/esm/internals/hooks/useField/useFieldCharacterEditing.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useUtils } from \"../useUtils.js\";\nimport { changeSectionValueFormat, cleanDigitSectionValue, doesSectionFormatHaveLeadingZeros, getDateSectionConfigFromFormatToken, getDaysInWeekStr, getLetterEditingOptions, applyLocalizedDigits, removeLocalizedDigits, isStringNumber } from \"./useField.utils.js\";\nconst isQueryResponseWithoutValue = response => response.saveQuery != null;\n\n/**\n * Update the active section value when the user pressed a key that is not a navigation key (arrow key for example).\n * This hook has two main editing behaviors\n *\n * 1. The numeric editing when the user presses a digit\n * 2. The letter editing when the user presses another key\n */\nexport const useFieldCharacterEditing = ({\n  stateResponse: {\n    // States and derived states\n    localizedDigits,\n    sectionsValueBoundaries,\n    state,\n    timezone,\n    // Methods to update the states\n    setCharacterQuery,\n    setTempAndroidValueStr,\n    updateSectionValue\n  }\n}) => {\n  const utils = useUtils();\n  const applyQuery = ({\n    keyPressed,\n    sectionIndex\n  }, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {\n    const cleanKeyPressed = keyPressed.toLowerCase();\n    const activeSection = state.sections[sectionIndex];\n\n    // The current query targets the section being editing\n    // We can try to concatenate the value\n    if (state.characterQuery != null && (!isValidQueryValue || isValidQueryValue(state.characterQuery.value)) && state.characterQuery.sectionIndex === sectionIndex) {\n      const concatenatedQueryValue = `${state.characterQuery.value}${cleanKeyPressed}`;\n      const queryResponse = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);\n      if (!isQueryResponseWithoutValue(queryResponse)) {\n        setCharacterQuery({\n          sectionIndex,\n          value: concatenatedQueryValue,\n          sectionType: activeSection.type\n        });\n        return queryResponse;\n      }\n    }\n    const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);\n    if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {\n      setCharacterQuery(null);\n      return null;\n    }\n    setCharacterQuery({\n      sectionIndex,\n      value: cleanKeyPressed,\n      sectionType: activeSection.type\n    });\n    if (isQueryResponseWithoutValue(queryResponse)) {\n      return null;\n    }\n    return queryResponse;\n  };\n  const applyLetterEditing = params => {\n    const findMatchingOptions = (format, options, queryValue) => {\n      const matchingValues = options.filter(option => option.toLowerCase().startsWith(queryValue));\n      if (matchingValues.length === 0) {\n        return {\n          saveQuery: false\n        };\n      }\n      return {\n        sectionValue: matchingValues[0],\n        shouldGoToNextSection: matchingValues.length === 1\n      };\n    };\n    const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {\n      const getOptions = format => getLetterEditingOptions(utils, timezone, activeSection.type, format);\n      if (activeSection.contentType === 'letter') {\n        return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);\n      }\n\n      // When editing a digit-format month / weekDay and the user presses a letter,\n      // We can support the letter editing by using the letter-format month / weekDay and re-formatting the result.\n      // We just have to make sure that the default month / weekDay format is a letter format,\n      if (fallbackFormat && formatFallbackValue != null && getDateSectionConfigFromFormatToken(utils, fallbackFormat).contentType === 'letter') {\n        const fallbackOptions = getOptions(fallbackFormat);\n        const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);\n        if (isQueryResponseWithoutValue(response)) {\n          return {\n            saveQuery: false\n          };\n        }\n        return _extends({}, response, {\n          sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      switch (activeSection.type) {\n        case 'month':\n          {\n            const formatFallbackValue = fallbackValue => changeSectionValueFormat(utils, fallbackValue, utils.formats.month, activeSection.format);\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.month, formatFallbackValue);\n          }\n        case 'weekDay':\n          {\n            const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.weekday, formatFallbackValue);\n          }\n        case 'meridiem':\n          {\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);\n          }\n        default:\n          {\n            return {\n              saveQuery: false\n            };\n          }\n      }\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery);\n  };\n  const applyNumericEditing = params => {\n    const getNewSectionValue = ({\n      queryValue,\n      skipIfBelowMinimum,\n      section\n    }) => {\n      const cleanQueryValue = removeLocalizedDigits(queryValue, localizedDigits);\n      const queryValueNumber = Number(cleanQueryValue);\n      const sectionBoundaries = sectionsValueBoundaries[section.type]({\n        currentDate: null,\n        format: section.format,\n        contentType: section.contentType\n      });\n      if (queryValueNumber > sectionBoundaries.maximum) {\n        return {\n          saveQuery: false\n        };\n      }\n\n      // If the user types `0` on a month section,\n      // It is below the minimum, but we want to store the `0` in the query,\n      // So that when he pressed `1`, it will store `01` and move to the next section.\n      if (skipIfBelowMinimum && queryValueNumber < sectionBoundaries.minimum) {\n        return {\n          saveQuery: true\n        };\n      }\n      const shouldGoToNextSection = queryValueNumber * 10 > sectionBoundaries.maximum || cleanQueryValue.length === sectionBoundaries.maximum.toString().length;\n      const newSectionValue = cleanDigitSectionValue(utils, queryValueNumber, sectionBoundaries, localizedDigits, section);\n      return {\n        sectionValue: newSectionValue,\n        shouldGoToNextSection\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      if (activeSection.contentType === 'digit' || activeSection.contentType === 'digit-with-letter') {\n        return getNewSectionValue({\n          queryValue,\n          skipIfBelowMinimum: false,\n          section: activeSection\n        });\n      }\n\n      // When editing a letter-format month and the user presses a digit,\n      // We can support the numeric editing by using the digit-format month and re-formatting the result.\n      if (activeSection.type === 'month') {\n        const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, 'digit', 'month', 'MM');\n        const response = getNewSectionValue({\n          queryValue,\n          skipIfBelowMinimum: true,\n          section: {\n            type: activeSection.type,\n            format: 'MM',\n            hasLeadingZerosInFormat,\n            hasLeadingZerosInInput: true,\n            contentType: 'digit',\n            maxLength: 2\n          }\n        });\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = changeSectionValueFormat(utils, response.sectionValue, 'MM', activeSection.format);\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n\n      // When editing a letter-format weekDay and the user presses a digit,\n      // We can support the numeric editing by returning the nth day in the week day array.\n      if (activeSection.type === 'weekDay') {\n        const response = getNewSectionValue({\n          queryValue,\n          skipIfBelowMinimum: true,\n          section: activeSection\n        });\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = getDaysInWeekStr(utils, activeSection.format)[Number(response.sectionValue) - 1];\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery, queryValue => isStringNumber(queryValue, localizedDigits));\n  };\n  return useEventCallback(params => {\n    const section = state.sections[params.sectionIndex];\n    const isNumericEditing = isStringNumber(params.keyPressed, localizedDigits);\n    const response = isNumericEditing ? applyNumericEditing(_extends({}, params, {\n      keyPressed: applyLocalizedDigits(params.keyPressed, localizedDigits)\n    })) : applyLetterEditing(params);\n    if (response == null) {\n      setTempAndroidValueStr(null);\n      return;\n    }\n    updateSectionValue({\n      section,\n      newSectionValue: response.sectionValue,\n      shouldGoToNextSection: response.shouldGoToNextSection\n    });\n  });\n};\n\n/**\n * The letter editing and the numeric editing each define a `CharacterEditingApplier`.\n * This function decides what the new section value should be and if the focus should switch to the next section.\n *\n * If it returns `null`, then the section value is not updated and the focus does not move.\n */\n\n/**\n * Function called by `applyQuery` which decides:\n * - what is the new section value ?\n * - should the query used to get this value be stored for the next key press ?\n *\n * If it returns `{ sectionValue: string; shouldGoToNextSection: boolean }`,\n * Then we store the query and update the section with the new value.\n *\n * If it returns `{ saveQuery: true` },\n * Then we store the query and don't update the section.\n *\n * If it returns `{ saveQuery: false },\n * Then we do nothing.\n */"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}